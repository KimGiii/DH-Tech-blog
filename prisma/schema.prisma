generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model LocalUser {
  id        Int            @id @default(autoincrement())
  nickname  String
  email     String         @unique
  password  String
  role      Role           @default(USER)
  posts     Post[]
  reactions PostReaction[]
  createdAt DateTime       @default(now())
}

model Post {
  id        Int            @id @default(autoincrement())
  author    LocalUser      @relation(fields: [authorId], references: [id])
  authorId  Int
  title     String
  content   String
  category  Category
  reactions PostReaction[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model PostReaction {
  id        Int          @id @default(autoincrement())
  user      LocalUser    @relation(fields: [userId], references: [id])
  userId    Int
  post      Post         @relation(fields: [postId], references: [id])
  postId    Int
  type      ReactionType
  createdAt DateTime     @default(now())

  @@unique([userId, postId]) // 중복 방지
}

enum Role {
  ADMIN
  USER
}

enum Category {
  JAVASCRIPT
  TYPESCRIPT
  REACT
  ETC
}

enum ReactionType {
  LIKE
  DISLIKE
}

// Github 연동 로그인
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
